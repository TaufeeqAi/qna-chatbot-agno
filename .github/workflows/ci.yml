name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Specify your project's Python version

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      - name: Install frontend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r frontend/requirements.txt

      - name: Lint backend with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. We want to fail the build on errors.
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: Lint frontend with flake8
        run: |
          cd frontend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint # Run after linting is successful
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Specify your project's Python version

      - name: Install backend dependencies (including pytest)
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      # If frontend has tests and different dependencies, install them too
      # - name: Install frontend dependencies (including pytest)
      #   run: |
      #     pip install -r frontend/requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          pytest
      
      # - name: Run frontend tests (if any)
      #   run: |
      #     cd frontend
      #     pytest

  build_docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test] # Run after lint and test jobs are successful
    # Only run on push to main or develop, not on PRs for the push part,
    # but build can run on PRs to check if Dockerfiles are valid.
    # Conditional push can be managed within steps: if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (Optional - requires secrets)
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # Add similar login for GitHub Container Registry if preferred
        # - name: Log in to GitHub Container Registry
        #   if: github.event_name == 'push'
        #   uses: docker/login-action@v3
        #   with:
        #     registry: ghcr.io
        #     username: ${{ github.actor }}
        #     password: ${{ secrets.GITHUB_TOKEN }}


      - name: Build backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-backend:latest -f backend/Dockerfile backend/
          docker build -t ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-backend:${{ github.sha }} -f backend/Dockerfile backend/
          # For GHCR: ghcr.io/${{ github.repository_owner }}/research-chatbot-backend:latest

      - name: Build frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-frontend:latest -f frontend/Dockerfile frontend/
          docker build -t ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-frontend:${{ github.sha }} -f frontend/Dockerfile frontend/
          # For GHCR: ghcr.io/${{ github.repository_owner }}/research-chatbot-frontend:latest

      - name: Push backend Docker image (Optional - requires secrets & login)
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          docker push ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-backend:${{ github.sha }}
          # For GHCR: docker push ghcr.io/${{ github.repository_owner }}/research-chatbot-backend:latest

      - name: Push frontend Docker image (Optional - requires secrets & login)
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          docker push ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/research-chatbot-frontend:${{ github.sha }}
          # For GHCR: docker push ghcr.io/${{ github.repository_owner }}/research-chatbot-frontend:latest
